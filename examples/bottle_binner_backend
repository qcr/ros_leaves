#!/usr/bin/env python
from __future__ import print_function

import actionlib
import cv_bridge
import numpy as np
from random import randint
import ros_numpy
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Header
import sys

from ros_msgs.msg import (ActuateGripperAction, ActuateGripperGoal,
                         ActuateGripperResult, MoveToNamedPoseAction,
                         MoveToNamedPoseResult, MoveToPoseAction,
                         MoveToPoseResult, Object)
from ros_msgs.srv import (GetSyncedImages, GetSyncedImagesResponse, FindObjects,
                         FindObjectsResponse)


class DummyBottleBinnerBackend(object):
    IMAGE_WIDTH = 640
    IMAGE_HEIGHT = 480

    def __init__(self):
        self._bridge = cv_bridge.CvBridge()

        # Startup all of our fake services...
        self._actuate_gripper_as = actionlib.SimpleActionServer(
            '/action/actuate_gripper',
            ActuateGripperAction,
            self.cb_actuate_gripper,
            auto_start=False)
        self._detect_bottles_service = rospy.Service('/service/detect_bottles',
                                                     FindObjects,
                                                     self.cb_detect_bottles)
        self._synced_rgbd_service = rospy.Service('/service/get_synced_rgbd',
                                                  GetSyncedImages,
                                                  self.cb_get_synced_rgbd)
        self._move_gripper_location_as = actionlib.SimpleActionServer(
            '/action/move_gripper/location',
            MoveToNamedPoseAction,
            self.cb_move_gripper_location,
            auto_start=False)
        self._move_gripper_pose_as = actionlib.SimpleActionServer(
            '/action/move_gripper/pose',
            MoveToPoseAction,
            self.cb_move_gripper_pose,
            auto_start=False)

        self._actuate_gripper_as.start()
        self._move_gripper_location_as.start()
        self._move_gripper_pose_as.start()

        print("All dummy services are now running...")

    @staticmethod
    def _print_dramatic(string, delay):
        print(string + " ... ", end="")
        sys.stdout.flush()
        rospy.sleep(delay)
        print("Done")

    def cb_actuate_gripper(self, goal):
        # Print some dummy output
        success = (goal.mode == ActuateGripperGoal.MODE_STATIC)
        if success:
            self._print_dramatic(
                "%s gripper" %
                ("Opening" if goal.state == ActuateGripperGoal.STATE_OPEN else
                 "Closing"), 0.5)
        else:
            print("Doing something with the gripper I'm not expecting... ")

        # Return an appropriate result
        (self._actuate_gripper_as.set_succeeded if success else
         self._actuate_gripper_as.set_aborted)(ActuateGripperResult())

    def cb_detect_bottles(self, req):
        # Generate some random detections within the images...
        depth_image = ros_numpy.numpify(req.input_depth_image)
        rgb_image = ros_numpy.numpify(req.input_rgb_image)
        objects = []
        for _ in range(0, randint(1, 5)):
            wh = (randint(5, 50), randint(5, 50))  # (w, h)
            xy = (randint(0, self.IMAGE_WIDTH - wh[0]),
                  randint(0, self.IMAGE_HEIGHT - wh[1]))  # (x, y)
            depth = ros_numpy.msgify(Image,
                                     depth_image[xy[1]:xy[1] +
                                                 wh[1], xy[0]:xy[0] + wh[0]],
                                     encoding='mono8')
            depth.header.frame_id = req.input_depth_image.header.frame_id
            rgb = ros_numpy.msgify(Image,
                                   rgb_image[xy[1]:xy[1] + wh[1], xy[0]:xy[0] +
                                             wh[0], :],
                                   encoding='rgb8')
            rgb.header.frame_id = req.input_rgb_image.header.frame_id
            objects.append(
                Object(class_label='bottle',
                       x_left=xy[0],
                       y_top=xy[1],
                       width=wh[0],
                       height=wh[1],
                       cropped_depth=depth,
                       cropped_rgb=rgb))
        self._print_dramatic("Detecting bottles", 0.1)
        return FindObjectsResponse(objects=objects)

    def cb_get_synced_rgbd(self, req):
        # Return a response with some dummy images
        self._print_dramatic("Getting synced RGBD", 0.1)
        depth_msg = ros_numpy.msgify(
            Image,
            np.random.randint(100, 255,
                              (self.IMAGE_HEIGHT, self.IMAGE_WIDTH)).astype(
                                  np.uint8),
            encoding='mono8')
        depth_msg.header.frame_id = req.camera_namespace
        rgb_msg = ros_numpy.msgify(
            Image,
            np.random.randint(0, 255,
                              (self.IMAGE_HEIGHT, self.IMAGE_WIDTH, 3)).astype(
                                  np.uint8),
            encoding='rgb8')
        rgb_msg.header.frame_id = req.camera_namespace
        return GetSyncedImagesResponse(synced_depth_image=depth_msg,
                                       synced_rgb_image=rgb_msg)

    def cb_move_gripper_location(self, goal):
        success = goal.pose_name in ['bin', 'workspace']
        if success:
            self._print_dramatic(
                "Moving gripper to location '%s'" % goal.pose_name, 5)
        else:
            print("I do not know the location '%s' ... Aborting" %
                  goal.pose_name)

        # Return an appropriate result
        (self._move_gripper_location_as.set_succeeded if success else
         self._move_gripper_location_as.set_aborted)(MoveToNamedPoseResult())

    def cb_move_gripper_pose(self, goal):
        pos = goal.goal_pose.pose.position
        self._print_dramatic(
            "Moving gripper to location (%f, %f, %f) in frame '%s'" %
            (pos.x, pos.y, pos.z, goal.goal_pose.header.frame_id), 5)

        # Return an appropriate result
        self._move_gripper_pose_as.set_succeeded(MoveToPoseResult())


if __name__ == '__main__':
    rospy.init_node("dummy_bottle_binner_backend")
    dbbs = DummyBottleBinnerBackend()
    rospy.spin()
