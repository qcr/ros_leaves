#!/usr/bin/env python

import imp
import os
import rospkg
import rospy
from std_msgs.msg import String

_TASKS_DIRECTORY = os.path.join(rospkg.RosPack().get_path('rv_leaves'),
                                'tasks')
_TASK_FILENAME = 'tree.py'
_TREE_FN_NAME = 'tree'

if __name__ == '__main__':
    rospy.init_node('task_tree')

    # Extract values for parameters
    hz = rospy.get_param('~hz', 20)
    autostart = rospy.get_param('~autostart', True)
    log_level = rospy.get_param('~log_level', 'WARN')
    task_name = rospy.get_param('~task_name', None)

    # Resolve a valid task_name to load
    if task_name is None:
        try:
            task_name = rospy.wait_for_message('/task_name', String, 0.5).data
        except rospy.ROSException:
            task_name = None
    if task_name is None:
        # TODO ask in the console from the list of folders in './tasks/'
        raise NotImplementedError(
            "No task_name provided, guided selection not implemented yet.")

    # Get all resources required in loading the task
    task_tree_filename = os.path.join(_TASKS_DIRECTORY, task_name,
                                      _TASK_FILENAME)
    if not os.path.isfile(task_tree_filename):
        raise ValueError(
            "The file '%s' could not be found for task name '%s'" %
            (task_tree_filename, task_name))
    task_tree_module = imp.load_source(task_name, task_tree_filename)
    if not hasattr(task_tree_module, _TREE_FN_NAME):
        raise ValueError("The '%s' does not contain a function called '%s'" %
                         (task_tree_filename, _TREE_FN_NAME))

    # Construct & run the tree
    getattr(task_tree_module, _TREE_FN_NAME)().run(hz=hz,
                                                   push_to_start=not autostart,
                                                   log_level=log_level)
